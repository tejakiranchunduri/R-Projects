require(tm)
library(SnowballC)
library(wordcloud)
library(text2vec)
library(dplyr)
### Function to Preprocess the text data
preprocess <- function(text){
category <- Corpus(VectorSource(text))
getTransformations()
toSpace <- content_transformer(function(x, pattern) {return (gsub(pattern, " ", x))})
uniqueWords = content_transformer(function(x) { unique(strsplit(x, " ")[[1]]) })
category <- tm_map(category, toSpace, "-")
category <- tm_map(category, toSpace, ":")
category <- tm_map(category, toSpace, "'")
category <- tm_map(category, removePunctuation)
category <- tm_map(category, removeNumbers)
category <- tm_map(category, content_transformer(tolower))
category <- tm_map(category, content_transformer(function(x) iconv(enc2utf8(x), sub = "byte")))
category <- tm_map(category, function(x) iconv(x, "latin1", "ASCII", sub=""))
category <- tm_map(category, removeWords, stopwords("english"))
category <- tm_map(category, uniqueWords)
category <- tm_map(category, stripWhitespace)
category <- tm_map(category, stemDocument)
category <- tm_map(category, PlainTextDocument)
for(i in 1:length(category)) {
category[[i]] <- removeWords(category[[i]], ".{2}?")
}
category <- tm_map(category, toSpace, "\n")
category[[1]]$content
}
######################### COSINE SIMILARITY ##############################
calculateCosineSimilarity <- function(plotSummaries, preprocessedQuery) {
cat("calculating cosine similarities .............")
docs <- plotSummaries$summary
it <- itoken(c(docs, preprocessedQuery), progressbar = FALSE)
v = create_vocabulary(it) %>% prune_vocabulary(doc_proportion_max = 0.1, term_count_min = 3)
vectorizer = vocab_vectorizer(v)
it1 <- itoken(docs, progressbar = FALSE )
dtm1 = create_dtm(it1, vectorizer)
it2 <- itoken(preprocessedQuery, progressbar = FALSE)
dtm2 = create_dtm(it2, vectorizer)
d1_d2_cos_sim = sim2(dtm1, dtm2, method = "cosine", norm = "l2")
cosine_matrix <- as.matrix(d1_d2_cos_sim)
data.frame(doc = plotSummaries$doc_id, score = cosine_matrix)
}
################################# TF - IDF #####################################
#### Function to get term document weights for each document  ########################
get_tfidf_weights <- function(tf_vec) {
n_docs <- length(tf_vec)
doc_frequency <- length(tf_vec[tf_vec > 0])
weights <- rep(0, length(tf_vec))
weights[tf_vec > 0] <- (1 + log2(tf_vec[tf_vec > 0])) * log2(n_docs/doc_frequency)
return(weights)
}
buildTermDocumentMatrix <- function(plotSummaries, preprocessedQuery) {
docs <- VectorSource(c(plotSummaries$summary, preprocessedQuery))
docs$names <- c(plotSummaries$doc_id, "query")
corpus <- Corpus(docs)
corpus_tdm <- TermDocumentMatrix(corpus)
colnames(corpus_tdm) <- c(plotSummaries$doc_id, "query")
#Removing unnecessary elements as matrix is too sparse
corpus_tdm_rm_sparse <- removeSparseTerms(corpus_tdm, 0.99)
as.matrix(corpus_tdm_rm_sparse)
}
calculateTF_IDF <- function(plotSummaries, preprocessedQuery) {
cat("Calcualting tf-idf values .......")
term_doc_matrix <- buildTermDocumentMatrix(plotSummaries, preprocessedQuery)
tfidf_matrix <- t(apply(term_doc_matrix, 1,
FUN = function(row) {get_tfidf_weights(row)}))
colnames(tfidf_matrix) <- colnames(term_doc_matrix)
tfidf_matrix <- scale(tfidf_matrix, center = FALSE, scale = sqrt(colSums(tfidf_matrix^2)))
N_docs <- length(plotSummaries$summary)
query_vector <- tfidf_matrix[, N_docs + 1]
tfidf_matrix <- tfidf_matrix[, 1:N_docs]
doc_scores <- t(query_vector) %*% tfidf_matrix
data.frame(doc = plotSummaries$doc_id, score = t(doc_scores))
}
getResultDataFrame <- function(plotSummaries, preprocessedQuery) {
numWordsInQuery <- sapply(strsplit(preprocessedQuery, " "), length)
if(numWordsInQuery == 0) {
stop("Please provide a valid search term")
} else if (numWordsInQuery == 1) {
calculateTF_IDF(plotSummaries =  plotSummaries, preprocessedQuery = preprocessedQuery)
} else {
calculateCosineSimilarity(plotSummaries =  plotSummaries, preprocessedQuery = preprocessedQuery)
}
}
############################ Get Data ######################################
df <- read.table("plot_summaries.txt", header = FALSE, sep="\t", stringsAsFactors = FALSE, quote="")
movieNames <- read.csv("movie.metadata.tsv",
sep = "\t", header = FALSE)
colnames(movieNames) <- c("doc", "FreebaseID", "MovieName", "release date", "revenue",
"runtime", "languages", "countries", "genres")
####################### Preprocess the summaries ##############################
plot_summaries <- data.frame(doc_id = df[,1], summary = df[,2])
summaries <- lapply(plot_summaries$summary, as.character)
plot_summaries$summary <- lapply(summaries, preprocess)
plot_summaries <- data.frame(lapply(plot_summaries, as.character), stringsAsFactors = FALSE)
input <- ''
while(input != 'q') {
query <- readline(prompt="Enter search term(s): ")
processedQuery <- preprocess(query)
########################## Most frequent #################################
term_doc_matrix <- buildTermDocumentMatrix(plotSummaries = plot_summaries, preprocessedQuery = processedQuery)
most_frequent_matrix<- addmargins(term_doc_matrix, margin = 2)
most_frequent_matrix<- most_frequent_matrix[order(most_frequent_matrix[,15], decreasing = TRUE),]
most_frequent_matrix_top50<- head(most_frequent_matrix[,c(1,15)], n = 50)
print(most_frequent_matrix_top50)
######################### word cloud ####################################
wordTable<- head(most_frequent_matrix[,15], n = 150)
wordcloud(words = names(wordTable),
freq = as.numeric(wordTable),
scale = c(2, 1),
min.freq = 1)
################## Search Results ##########################################
results_df <- getResultDataFrame(plotSummaries =  plot_summaries, preprocessedQuery = processedQuery)
resultDF <- merge(results_df, movieNames, by = "doc")
names(resultDF) <- c("doc", "score")
printDF <- resultDF[order(resultDF$score, decreasing = TRUE), ]
printDF <- printDF[,c(1,2,4)]
names(printDF) <- c("doc", "score", "Movie Title")
if(is.na(printDF$score[1])) {
print("The query you entered does not match with any of the documents! ")
} else {
print(printDF[0:10,], row.names = FALSE, right = FALSE, digits = 2)
}
input <- readline(prompt = "Press enter key to continue or q key to stop")
}
prompt("Hello")
writeLines("hello")
input <- ''
while(input != 'q') {
query <- readline(prompt="Enter search term(s): ")
processedQuery <- preprocess(query)
########################## Most frequent #################################
term_doc_matrix <- buildTermDocumentMatrix(plotSummaries = plot_summaries, preprocessedQuery = processedQuery)
most_frequent_matrix<- addmargins(term_doc_matrix, margin = 2)
most_frequent_matrix<- most_frequent_matrix[order(most_frequent_matrix[,15], decreasing = TRUE),]
most_frequent_matrix_top50<- head(most_frequent_matrix[,c(1,15)], n = 50)
print(most_frequent_matrix_top50)
######################### word cloud ####################################
wordTable<- head(most_frequent_matrix[,15], n = 150)
wordcloud(words = names(wordTable),
freq = as.numeric(wordTable),
scale = c(2, 1),
min.freq = 1)
################## Search Results ##########################################
results_df <- getResultDataFrame(plotSummaries =  plot_summaries, preprocessedQuery = processedQuery)
resultDF <- merge(results_df, movieNames, by = "doc")
names(resultDF) <- c("doc", "score")
printDF <- resultDF[order(resultDF$score, decreasing = TRUE), ]
printDF <- printDF[,c(1,2,4)]
names(printDF) <- c("doc", "score", "Movie Title")
if(is.na(printDF$score[1])) {
writeLines("The query you entered does not match with any of the documents! ")
} else {
writeLines(printDF[0:10,], row.names = FALSE, right = FALSE, digits = 2)
}
input <- readline(prompt = "Press enter key to continue or q key to stop: ")
}
input <- ''
while(input != 'q') {
query <- readline(prompt="Enter search term(s): ")
processedQuery <- preprocess(query)
########################## Most frequent #################################
term_doc_matrix <- buildTermDocumentMatrix(plotSummaries = plot_summaries, preprocessedQuery = processedQuery)
most_frequent_matrix<- addmargins(term_doc_matrix, margin = 2)
most_frequent_matrix<- most_frequent_matrix[order(most_frequent_matrix[,15], decreasing = TRUE),]
most_frequent_matrix_top50<- head(most_frequent_matrix[,c(1,15)], n = 50)
print(most_frequent_matrix_top50)
######################### word cloud ####################################
wordTable<- head(most_frequent_matrix[,15], n = 150)
wordcloud(words = names(wordTable),
freq = as.numeric(wordTable),
scale = c(2, 1),
min.freq = 1)
################## Search Results ##########################################
results_df <- getResultDataFrame(plotSummaries =  plot_summaries, preprocessedQuery = processedQuery)
resultDF <- merge(results_df, movieNames, by = "doc")
names(resultDF) <- c("doc", "score")
printDF <- resultDF[order(resultDF$score, decreasing = TRUE), ]
printDF <- printDF[,c(1,2,4)]
names(printDF) <- c("doc", "score", "Movie Title")
if(is.na(printDF$score[1])) {
writeLines("The query you entered does not match with any of the documents! ")
} else {
print(printDF[0:10,], row.names = FALSE, right = FALSE, digits = 2)
}
input <- readline(prompt = "Press enter key to continue or q key to stop: ")
}
input <- ''
while(input != 'q') {
query <- readline(prompt="Enter search term(s): ")
processedQuery <- preprocess(query)
########################## Most frequent #################################
term_doc_matrix <- buildTermDocumentMatrix(plotSummaries = plot_summaries, preprocessedQuery = processedQuery)
most_frequent_matrix<- addmargins(term_doc_matrix, margin = 2)
most_frequent_matrix<- most_frequent_matrix[order(most_frequent_matrix[,15], decreasing = TRUE),]
most_frequent_matrix_top50<- head(most_frequent_matrix[,c(1,15)], n = 50)
print(most_frequent_matrix_top50)
######################### word cloud ####################################
wordTable<- head(most_frequent_matrix[,15], n = 150)
wordcloud(words = names(wordTable),
freq = as.numeric(wordTable),
scale = c(2, 1),
min.freq = 1)
################## Search Results ##########################################
results_df <- getResultDataFrame(plotSummaries =  plot_summaries, preprocessedQuery = processedQuery)
resultDF <- merge(results_df, movieNames, by = "doc")
names(resultDF) <- c("doc", "score")
printDF <- resultDF[order(resultDF$score, decreasing = TRUE), ]
printDF <- printDF[,c(1,2,4)]
names(printDF) <- c("doc", "score", "Movie Title")
if(is.na(printDF$score[1])) {
cat("\n")
writeLines("The query you entered does not match with any of the documents! ")
} else {
cat("\n")
print(printDF[0:10,], row.names = FALSE, right = FALSE, digits = 2)
}
input <- readline(prompt = "Press enter key to continue or q key to stop: ")
}
